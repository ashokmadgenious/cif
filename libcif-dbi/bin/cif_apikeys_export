#!/usr/bin/env perl

# fix lib paths, some may be relative
BEGIN {
    require File::Spec;
    my @libs = (
        "lib",
        "local/lib",
        "../libcif/lib", # in case we're in -dev mode
    );
    my $bin_path;

    for my $lib (@libs) {
        unless ( File::Spec->file_name_is_absolute($lib) ) {
            unless ($bin_path) {
                if ( File::Spec->file_name_is_absolute(__FILE__) ) {
                    $bin_path = ( File::Spec->splitpath(__FILE__) )[1];
                }
                else {
                    require FindBin;
                    no warnings "once";
                    $bin_path = $FindBin::Bin;
                }
            }
            $lib = File::Spec->catfile( $bin_path, File::Spec->updir, $lib );
        }
        unshift @INC, $lib;
    }

}

use Getopt::Std;
use CIF qw/generate_uuid_ns/;
use CIF::Profile;
use Data::Dumper;

my $config          = $opts{'C'} || $ENV{'HOME'}.'/.cif';
my $groups          = $opts{'G'} = 'everyone';
my $limit           = $opts{'l'};

our %opts;
getopt('C:G:l:', \%opts);
die(usage()) if($opts{'h'});

sub usage {
    return <<EOF;
Usage: perl $0 {options...}

Basic:
    -h          this message
    -g          specify known groups (csv)
EOF
}

my ($err,$ret) = CIF::Profile->new({
    config  => $config,
});

die($err) if($err);
my $profile = $ret;

my @gg = split(',', $opts{'G'});

my $group_map = {};
my @gg = split(',', $groups);
foreach (@gg){
    $group_map->{generate_uuid_ns($_)} = $_;
}

my $tlp_map = {
    'private'       => 'red',
    'need-to-know'  => 'amber',
    'default'       => 'amber',
    'public'        => 'green'
};

my $limit = $opts{'l'} || 0;
my @array;
require JSON::XS;
my @recs = $profile->user_list({ user => $user });
if($#recs > -1){
    foreach (@recs){
        my $groups = $profile->groups($_->uuid());
        foreach my $g (@$groups){
            $g = $group_map->{$g};
        }
        my $default_group = $group_map->{$_->default_guid()};
        push(@$array,
            {
                token           => $_->uuid(),
                username        => $_->uuid_alias(),
                write           => $_->write(),
                revoked         => $_->revoked() || 0,
                groups          => $groups,
                read            => 1,
                default_group   => $default_group,
                expires         => $_->expires() || '',
                description     => $_->description() || '',
            },
        );
        if($limit){
            $limit--;
            if($limit == 0){
                last;
            }
        }
        
    }
    $array = JSON::XS::encode_json($array);
    print $array."\n";
} else {
    if($user){
        print $user." has ";
    }
    print 'no api keys...'."\n";
}
        
exit(0);   
